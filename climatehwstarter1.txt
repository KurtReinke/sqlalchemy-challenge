%matplotlib inline
from matplotlib import style
style.use('fivethirtyeight')
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime as dt

# Python SQL toolkit and Object Relational Mapper
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func, inspect

engine = create_engine("sqlite:///Resources/hawaii.sqlite")

# reflect an existing database into a new model
    # Reflect Database into ORM classes
        #Base = automap_base()
        #Base.prepare(engine, reflect=True)
        #Base.classes.keys()
        
base=automap_base()
# reflect the tables
base.prepare(engine, reflect=True)
# We can view all of the classes that automap found
#orm.keys()
base.classes.keys()

# Save references to each table
st=base.classes.station
me=base.classes.measurement
# Create our session (link) from Python to the DB
session=Session(engine)

# Design a query to retrieve the last 12 months of precipitation data 
#and plot the results.

#View Stations to see dates
#engine.execute('SELECT * FROM measurement LIMIT 5').fetchall()
# Total dates
all_date=session.query(func.count(me.date)).all()
all_date
#prec_data = session.query(me).filter(me.date =< 2019, 8, 20).all()
#for mammal in mammals:

#The Earliest Date
early_date=session.query(me.date).order_by(me.date.asc()).first()
early_date
# Calculate the date 1 year ago from the last data point in the database

#this is close enough, right? pls
# Latest Date

late_date=session.query(me.date).order_by(me.date.desc()).first()
late_date

#Find Column data to plot with
inspector = inspect(engine)
columns = inspector.get_columns('measurement')
for c in columns:
    print(c['name'], c["type"])

# Perform a query to retrieve the data and precipitation scores
# Sort the dataframe by date

#ALl dates greater than 2016-08-23
#add prcp data

data1=session.query(me.date, me.prcp).filter(me.date > '2016-08-22').\
    order_by(me.date.desc()).all()
data1

#Format raw data into dataframes and plot

#replot with variable of year ago data, because plot isnt working correctly
#create variable for year to date
#yeartodate= session.query(me.date).first()
#late_date must not be string
#late_date
yeartodate=dt.datetime(2017, 8, 23) - dt.timedelta(days=365)
yeartodate

# Save the query results as a Pandas DataFrame and set the index to
#the date column

#new query to reflect no date
data2=session.query(me.date, me.prcp).filter(me.date > yeartodate).\
    order_by(me.date.desc()).all()

#Create a dataframe and plot it
df1=pd.DataFrame(data2)
                 #, columns=['date', 'percipitation'])
                 #, columns=['id', 'station', 'prcp','date'])
    
#df1['date']=pd.to_datetime(df1['date'], format='%Y-%m-%d')

#set index
df1=df1.set_index('date')

#sort again by date
df1=df1.sort_values(by='date')
df1.head()

# Use Pandas Plotting with Matplotlib to plot the data

#Plot Data
plot1=df1.plot.bar()
plt.legend(loc='upper right')
#plt.tight_layout
plt.show()

#df1.count()

# Use Pandas to calcualte the summary statistics for the precipitation data
df1.describe()

# Design a query to show how many stations are available in this dataset

#stations1=session.query(me.st).sum()
stations1=session.query(me).group_by(me.station).count()
print(stations1)

# What are the most active stations? (i.e. what stations have the most rows)?
# List the stations and the counts in descending order.

#data2=session.query(me.station, me.prcp).\
   # filter(me.date > '2016-08-22').\
    #order_by('me.date').all()
active1 = session.query(me.station, func.count(me.station)).\
        group_by(me.station).\
        order_by(func.count(me.station).desc()).all()
active1

active_df=pd.DataFrame(active1, columns=['station','count'])
active_df

# Using the station id from the previous query, calculate the lowest 
#temperature recorded, highest temperature recorded, and average 

#temperature of the most active station?
#return


temperature= session.query(func.min(me.tobs), func.max(me.tobs), 
                           func.avg(me.tobs)) #.filter(me.station == active1).all()
print(f"Lowest Temperature Recorded:{temperature[0][0]}", 
      f"Highest Temperature Recorded: {temperature[0][1]}", 
      f"Average Temperature Recorded: {temperature[0][2]}")


# Choose the station with the highest number of temperature observations.

#Create the dataframe
#temp1=session.query(me.station, func.count(me.station).\
                     #label('count').group_by(me.station).desc()).all()

most_active=session.query(me.station, func.count(me.tobs)).group_by(me.station).\
                        order_by(func.count(me.station).desc()).first()
most_active


#rework variable so its no longer a string
most_active=most_active[0]
most_active

# Query the last 12 months of temperature observation data for this station

most_activeyr = session.query(me.tobs).filter(me.station == most_active).\
                filter(me.date >= yeartodate).order_by(me.date.desc()).all()

most_activeyr_df = pd.DataFrame(most_activeyr)
most_activeyr_df.head()


most_activeyr_df.plot.hist(bins=12)
#plt.legend(('Tobs'), loc='upper right')
#plt.ylabel=("frequency")
plt.xlabel=("Temperature")
plt.show()

#I guess fuck the xlabel? lolwut
# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' 
# and return the minimum, average, and maximum temperatures for that range of dates
def calc_temps(start_date, end_date):
    """TMIN, TAVG, and TMAX for a list of dates.
    
    Args:
        start_date (string): A date string in the format %Y-%m-%d
        end_date (string): A date string in the format %Y-%m-%d
        
    Returns:
        TMIN, TAVE, and TMAX
    """
    
    return session.query(func.min(me.tobs), func.avg(me.tobs), func.max(me.tobs)).\
        filter(me.date >= start_date).filter(me.date <= end_date).all()

# function usage example
print(calc_temps('2012-02-28', '2012-03-05'))